class Solution {
    int profit=0;
    vector<vector<vector<int>>>dp;
    int recursion(int ind,int buy,int cap,vector<int>& prices) {
        if(cap==0){
            return 0;
        }
        if(ind==prices.size()){
            return 0;
        }
        if(dp[ind][buy][cap]!=-1){
            return dp[ind][buy][cap];
        }
        if(buy){
            profit=max(-prices[ind]+recursion(ind+1,0,cap,prices),recursion(ind+1,1,cap,prices));
        }
        else{
            profit=max(prices[ind]+recursion(ind+1,1,cap-1,prices),recursion(ind+1,0,cap,prices));
        }
        return dp[ind][buy][cap]=profit;
    }
public:
    int maxProfit(int k, vector<int>& prices) {
           
         int n=prices.size();
         //dp.resize(n+1,vector<vector<int>>(2,vector<int>(3,0)));
       
        vector<vector<int>>prev(2,vector<int>(k+1,0));
        vector<vector<int>>cur(2,vector<int>(k+1,0));
         for(int ind=n-1;ind>=0;ind--){
             for(int buy=0;buy<2;buy++){
                 for(int cap=1;cap<=k;cap++){
                     if(buy){
                     cur[buy][cap]=max(-prices[ind]+prev[0][cap],prev[1][cap]);}
                     else{
                        cur[buy][cap]=max(prices[ind]+prev[1][cap-1],prev[0][cap]);
                     }
                 }
             }
             prev=cur;
         }

       return prev[1][k];
    }
};