class Solution {
    vector<vector<int>>dp;
    int recursion(int i,int j,string s, string t) {
        if(j==0)return 1;
        if(i==0)return 0;
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        if(s[i-1]==t[j-1]){
            return dp[i][j]=recursion(i-1,j-1,s,t)+recursion(i-1,j,s,t);
        }
        return dp[i][j]=recursion(i-1,j,s,t);
    }
public:
    int numDistinct(string s, string t) {
        int n=s.size();
        int m=t.size();
        dp.resize(n+1,vector<int>(m+1,0));
         //return recursion(n,m,s,t);
        vector<double>prev(m+1,0),cur(m+1,0);
        //for(int i=0;i<n;i++)prev[0]=1;
        prev[0]=cur[0]=1;
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(s[i-1]==t[j-1]){
                  cur[j]=prev[j-1]+prev[j];
                }
                else cur[j]=prev[j];
            }
            prev=cur;
        }
        return (int)prev[m];
    }
};