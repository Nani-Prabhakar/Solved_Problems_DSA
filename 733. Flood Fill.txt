//by BFS
class Solution {
public:
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {
        int n=image.size();
        int m=image[0].size();
        queue<pair<int,int>>q;
        q.push({sr,sc});
        int init=image[sr][sc];
        int dir[5]={-1,0,1,0,-1};
        vector<vector<int>>vis(n,vector<int>(m,0));
        vis[sr][sc]=1;
        while(!q.empty()){
            int r=q.front().first;
            int c=q.front().second;
            q.pop();
            image[r][c]=color;
            for(int i=0;i<4;i++){
                int row=r+dir[i];
                int col=c+dir[i+1];
                if(row>=0 and row<n and col>=0 and col<m and vis[row][col]!=1 and image[row][col]==init){
                    q.push({row,col});
                    vis[row][col]=1;
                }
            }
        }
        return image;
    }
};

//DFS

 int dir[5]={-1,0,1,0,-1};
    int n ,m;
    void dfs(int sr, int sc,int color,vector<vector<int>>& image,vector<vector<int>>&vis,int init){
        image[sr][sc]=color;
        vis[sr][sc]=1;
        for(int i=0;i<4;i++){
            int row=sr+dir[i];
            int col=sc+dir[i+1];
            if(row>=0 and row<n and col>=0 and col<m and vis[row][col]!=1 and image[row][col]==init){
                vis[row][col]=1;
                dfs(row,col,color,image,vis,init);
            }
        }
    }