vector<int> printingLongestIncreasingSubsequence(vector<int> arr, int n) {

    vector<int> dp(n, 1);

    vector<int> hash(n);

    int maxi=1;

    int lastind=0;

    for(int i=0; i<n; i++){

        hash[i]=i;

        for(int prev=0; prev<i; prev++){

            if(arr[prev]<arr[i] and 1+dp[prev]>dp[i]){

                dp[i]=1+dp[prev];

                hash[i]=prev;

            }

        }

        if(dp[i]>maxi){

            maxi=dp[i];

            lastind=i;

        }

    }

    vector<int> temp;

    temp.push_back(arr[lastind]);

    while(lastind!=hash[lastind]){

        lastind=hash[lastind];

        temp.push_back(arr[lastind]);

    }

    reverse(temp.begin(), temp.end());

    return temp;

}