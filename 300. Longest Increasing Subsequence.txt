class Solution {
    int helper(int ind,int prev,vector<int>arr, vector<vector<int>>&dp){
        if(ind==arr.size())return 0;
        if(prev!=-1 and dp[ind][prev]!=-1)return dp[ind][prev];
        int notTake=helper(ind+1,prev,arr,dp);
        int take=0;
        if(prev==-1 or arr[prev]<arr[ind])take=1+helper(ind+1,ind,arr,dp);
        if(prev!=-1 ){
            return dp[ind][prev]=max(take,notTake);
        }
        else return max(take,notTake);
    }
public:
    // int lengthOfLIS(vector<int>& nums) {
    //     int n=nums.size();
    //     //i//f(n==1)return 1;
    //     int dp[n];
    //     //memset(v,sizeof(n),0);
    //     dp[0]=1;
    //     int ans=0;
    //     for(int i=0;i<n;i++){
    //         int maxi=0;
    //         for(int j=0;j<i;j++){
    //             if(nums[j]<nums[i])maxi=max(maxi,dp[j]);
    //         }
    //         dp[i]=maxi+1;
    //         ans=max(ans,dp[i]);
    //     }
    //     return ans;
    // }
     int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();
        vector<int> ans;
        ans.push_back(nums[0]);
        for(int i=1 ; i< n ; i++)
        {
            if(nums[i] > ans.back())
                ans.push_back(nums[i]);

            else{
                int ind = lower_bound(ans.begin() , ans.end() , nums[i]) - ans.begin();
                ans[ind] = nums[i];
            }
                

        }


            return ans.size();
        

    }
};