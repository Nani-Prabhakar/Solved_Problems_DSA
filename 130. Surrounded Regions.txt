130. Surrounded Regions
// class Solution {
// public:
//     void solve(vector<vector<char>>& board) {
//         int n=board.size();
//         int m=board[0].size();
//         vector<vector<int>>vis(n,vector<int>(m,0));
//         queue<pair<int,int>>q;
//         for(int i=0;i<n;i++){
//             for(int j=0;j<m;j++){
//                 if((i==0 or i==n-1 or j==0 or j==m-1) and board[i][j]=='O'){
//                     q.push({i,j});
//                     vis[i][j]=1;
//                 }
//             }
//         }
//         int delta[5]={-1,0,1,0,-1};
//         while(!q.empty()){
//             int r=q.front().first;
//             int c=q.front().second;
//             q.pop();
//             for(int i=0;i<4;i++){
//                 int row=r+delta[i];
//                 int col=c+delta[i+1];
//                 if(row>=0 and row<n and col>=0 and col<m and board[row][col]=='O' and vis[row][col]!=1){
//                     q.push({row,col});
//                     vis[row][col]=1;
//                 }
//             }
//         }
//         for(int i=0;i<n;i++){
//             for(int j=0;j<m;j++){
//                 if(!vis[i][j] and board[i][j]=='O'){
//                     board[i][j]='X';
//                 }
//             }
//         }
//     }
// };
class Solution {
public:
void dfs(int row, int col, vector<vector<int>> &vis, 
    vector<vector<char>> &board, int delrow[], int delcol[]) {
        vis[row][col] = 1; 
        int n = board.size();
        int m = board[0].size();
        
        for(int i = 0;i<4;i++) {
            int nrow = row + delrow[i];
            int ncol = col + delcol[i]; 

            if(nrow >=0 && nrow <n && ncol >= 0 && ncol < m 
            && !vis[nrow][ncol] && board[nrow][ncol] == 'O') {
                dfs(nrow, ncol, vis, board, delrow, delcol); 
            }
        }
    }

    void solve(vector<vector<char>>& board) {

        int n=board.size();
        int m=board[0].size();
        
        vector<vector<int>>vis(n ,vector<int>(m ,0));
        int delrow[4] = {0 , 1 , 0 ,-1};
        int delcol[4] ={ 1 ,0 ,-1 ,0};

        for(int j = 0 ; j<m;j++) {
             
            if(!vis[0][j] && board[0][j] == 'O') {
                dfs(0, j, vis, board, delrow, delcol); 
            }
            
            if(!vis[n-1][j] && board[n-1][j] == 'O') {
                dfs(n-1,j,vis,board, delrow, delcol); 
            }
        }


        for(int i = 0;i<n;i++) {
           
            if(!vis[i][0] && board[i][0] == 'O') {
                dfs(i, 0, vis, board, delrow, delcol); 
            }
            
         
            if(!vis[i][m-1] && board[i][m-1] == 'O') {
                dfs(i, m-1, vis, board, delrow, delcol); 
            }
        }
        
    
        for(int i = 0;i<n;i++) {
            for(int j= 0 ;j<m;j++) {
                if(!vis[i][j] && board[i][j] == 'O') 
                    board[i][j] = 'X'; 
            }
        }

        
    }
};