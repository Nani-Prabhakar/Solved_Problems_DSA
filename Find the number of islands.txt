class Solution {
    void dfs(int row, int col, vector<vector<int>>& vis, vector<vector<char>>& grid) {
        int n = grid.size() ;
        int m = grid[0].size() ;
        vis[row][col] = 1 ;
        for(int i=-1 ;i<=1; i++) {
           for(int j=-1;j<=1;j++){
                int x=row+i;
                int y=col+j;
                if(x>=0 && x<n && y>=0 && y<m && !vis[x][y] && grid[x][y]=='1') {
                    dfs(x,y,vis,grid) ;
                }
           }
        }
    }
  public:
    // Function to find the number of islands.
    int numIslands(vector<vector<char>>& grid) {
        // Code here
        int n = grid.size() ;
        int m = grid[0].size() ;
        int cnt=0;
        vector<vector<int>> vis(n, vector<int>(m, 0)) ;
        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                if(!vis[i][j] && grid[i][j]=='1') {
                    dfs(i,j,vis,grid) ;
                    cnt++;
                }
            }
        }
        
        return cnt ;
    }
};