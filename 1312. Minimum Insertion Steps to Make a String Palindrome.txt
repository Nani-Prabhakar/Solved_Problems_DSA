
class Solution {
      int spaceOptimise(string text1,string text2){
        vector<int> curr(text2.length()+1,0);
        vector<int> next(text2.length()+1,0);
        for(int i=text1.length()-1;i>=0;i--){
            for(int j=text2.length()-1;j>=0;j--){
                    int ans;
                    if(text1[i]==text2[j])
                        ans=1+next[j+1];
                    else
                        ans=max(curr[j+1],next[j]);
                    curr[j]=ans;
            }
            next=curr;
        }
        return next[0];
    }
    int longestPalindromeSubseq(string s1) {
        string s2=s1;
        reverse(s2.begin(),s2.end());
        return spaceOptimise(s1,s2);
    }
public:
    int minInsertions(string s) {
        return s.size()-longestPalindromeSubseq(s);
    }
};