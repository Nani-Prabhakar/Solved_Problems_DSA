//post order iterative.cpp
/*
    Following is Binary Tree Node structure:
    class TreeNode
    {
    public:
        int data;
        TreeNode *left, *right;
        TreeNode() : data(0), left(NULL), right(NULL) {}
        TreeNode(int x) : data(x), left(NULL), right(NULL) {}
        TreeNode(int x, TreeNode *left, TreeNode *right) : data(x), left(left), right(right) {}
    };
*/
vector<int> postorderTraversal(TreeNode *root)
{
    // Write your code here.
    stack<TreeNode*>st;
    vector<int>ans;
    st.push(root);
    while(!st.empty()){
        TreeNode *node=st.top();
        st.pop();
        ans.push_back(node->data);
        if(node->left)st.push(node->left);
        if(node->right)st.push(node->right);
    }
    reverse(ans.begin(),ans.end());
    return ans;
//     vector < int > postOrder;
//   if (cur == NULL) return postOrder;

//   stack < TreeNode * > st;
//   while (cur != NULL || !st.empty()) {

//     if (cur != NULL) {
//       st.push(cur);
//       cur = cur -> left;
//     } else {
//       TreeNode * temp = st.top() -> right;
//       if (temp == NULL) {
//         temp = st.top();
//         st.pop();
//         postOrder.push_back(temp -> data);
//         while (!st.empty() && temp == st.top() -> right) {
//           temp = st.top();
//           st.pop();
//           postOrder.push_back(temp -> data);
//         }
//       } else cur = temp;
//     }
//   }
//   return postOrder;
}