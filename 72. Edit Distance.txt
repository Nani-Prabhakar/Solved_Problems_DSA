// class Solution {
//     vector<vector<int>>dp;
//     int recursion(int i,int j,string s1, string s2) {
//         if(i==0)return j;
//         if(j==0)return i;
//         if(dp[i][j]!=-1){
//             return dp[i][j];
//         }
//         if(s1[i-1]==s2[j-1]){
//             return dp[i][j] =recursion(i-1,j-1,s1,s2);
//         }
//         return dp[i][j]=1+min(recursion(i,j-1,s1,s2),min(
//                     recursion(i-1,j,s1,s2),recursion(i-1,j-1,s1,s2)
//         ));
//     }

// public:
//     int minDistance(string s1, string s2) {
//         int n=s1.size();
//         int m=s2.size();
//         if(n==0)return m;
//         if(m==0)return n;
//         dp.resize(n+1,vector<int>(m+1,0));
//         for(int j=0;j<m;j++){
//             dp[0][j]=j;
//         }
//         for(int i=0;i<n;i++){
//             dp[i][0]=i;
//         }
//         for(int i=1;i<=n;i++){
//             for(int j=1;j<=m;j++){
//                 if(s1[i-1]==s2[j-1]){
//                     dp[i][j] =dp[i-1][j-1];
//                 }
//                 else dp[i][j]=1+min(dp[i][j-1],min(
//                     dp[i-1][j],dp[i-1][j-1])
//                     );
//                 }
//         }
//         return dp[n][m];
//     }
// };
// 
class Solution {
public:
    int minDistance(string word1, string word2) {
        int n1=word1.size();
        int n2=word2.size();
        vector<int> prev(n2+1);


        for(int i=0;i<=n1;i++){
            vector<int> curr(n2+1);
            curr[0]=i;
            for(int j=1;j<=n2;j++){
                if(i==0){curr[j]=j;continue;}
                if(word1[i-1]==word2[j-1]){
                    curr[j]=0+prev[j-1];
                }
                else{
                    curr[j]=1 + min(prev[j-1],min(prev[j],curr[j-1]));
                }
            }
            prev=curr;
        }

        return prev[n2];
    }
};