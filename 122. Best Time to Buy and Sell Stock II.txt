class Solution {
    public:
    int profit=0;
    vector<vector<int>>dp;
    int recursion(int ind,int buy,vector<int>& prices) {
        if(ind==prices.size()){
            return 0;
        }
        if(buy){
            profit=max(-prices[ind]+recursion(ind+1,0,prices),recursion(ind+1,1,prices));
        }
        else{
            profit=max(+prices[ind]+recursion(ind+1,1,prices),recursion(ind+1,0,prices));
        }
        return profit;
    }
    int memorization(int ind,int buy,vector<int>& prices) {
        if(ind==prices.size()){
            return 0;
        }
        if(dp[ind][buy]!=-1){
            return dp[ind][buy];
        }
        if(buy){
            profit=max(-prices[ind]+memorization(ind+1,0,prices),memorization(ind+1,1,prices));
        }
        else{
            profit=max(+prices[ind]+memorization(ind+1,1,prices),memorization(ind+1,0,  prices));
        }
        return dp[ind][buy]=profit;
    }
    int Greedy(vector<int>& prices) {
        int n=prices.size();
        for(int i=1;i<n;i++){
            if(prices[i]>prices[i-1]){
                profit+=prices[i]-prices[i-1];
            }
        }
        return profit;
    }

    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        //return recursion(0,1,prices);
        dp.resize(n,vector<int>(2,-1));
        //return memorization(0,1,prices);
        return Greedy(prices);
    }
};